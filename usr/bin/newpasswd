#!/usr/bin/env python
import argparse
import unicodedata
import random

# Python 2 compatibility
try:
    chr(256)
except ValueError:
    chr = unichr

# Arguments' parser
parser = argparse.ArgumentParser(description='Generate a brand new password.')
parser.add_argument('-l', '--length', metavar='LEN', type=int, default=32,
                    help='length of your password')
parser.add_argument('-n', '--count', metavar='N', type=int, default=1,
                    help='ammount of passwords to generate')
parser.add_argument('-a', '--all', action='store_true',
                    help='use as much different characters as possible')
parser.add_argument('--latin', action='store_true',
                    help='use more latin characters when generating a '
                         'password')
parser.add_argument('--greek', action='store_true',
                    help='use greek and coptic characters when generating a'
                         ' password')
parser.add_argument('--cyrillic', action='store_true',
                    help='use cyrillic characters when generating a password')
parser.add_argument('--armenian', action='store_true',
                    help='use armenian characters when generating a password')
parser.add_argument('--kana', action='store_true',
                    help='use hiragana and katakana when generating a '
                         'password')
parser.add_argument('--cjk', action='store_true',
                    help='use CJK ideographs when generating a password')


def chrname(char):
    return unicodedata.name(char, None)


def random_chr(letters):
    return letters[random.randint(0, len(letters) - 1)]


if __name__ == "__main__":
    args = parser.parse_args()

    # We are using ASCII letters, numbers and symbols for base.
    letters = [chr(i) for i in range(0x21, 0x7F)]

    if args.latin or args.all:
        # Latin-1 Supplement, Extended-A and Extended-B
        letters.extend(chr(i) for i in range(0xA1, 0xAD))
        letters.extend(chr(i) for i in range(0xAE, 0x250))
        # Latin Extended Additional
        letters.extend(chr(i) for i in range(0x1E00, 0x1F00))
        # Latin Extended-C
        letters.extend(chr(i) for i in range(0x2C60, 0x2C80))
        # Latin Extended-D
        letters.extend(chr(i) for i in range(0xA720, 0xA800) if chrname(chr(i)))

    if args.greek or args.all:
        # Greek and Coptic
        letters.extend(chr(i) for i in range(0x370, 0x400) if chrname(chr(i)))
        # Greek Extended
        letters.extend(chr(i) for i in range(0x1F00, 0x2000) if chrname(chr(i)))

    if args.cyrillic or args.all:
        # Cyrillic and Cyrillic Supplement
        letters.extend(chr(i) for i in range(0x400, 0x530) if chrname(chr(i)))
        # Cyrillic Extended-A
        letters.extend(chr(i) for i in range(0x2DE0, 0x2E00) if chrname(chr(i)))
        # Cyrillic Extended-B
        letters.extend(chr(i) for i in range(0xA640, 0xA6A0) if chrname(chr(i)))

    if args.armenian or args.all:
        # Armenian
        letters.extend(chr(i) for i in range(0x530, 0x590) if chrname(chr(i)))

    if args.kana or args.all:
        # Hiragana and Katakana
        letters.extend(chr(i) for i in range(0x3040, 0x3100) if chrname(chr(i)))

    if args.cjk or args.all:
        # CJK Unified Ideographs
        letters.extend(chr(i) for i in range(0x4E00, 0xA000))
        # CJK Unified Ideographs Extension A
        letters.extend(chr(i) for i in range(0x3400, 0x4DC0))
        # CJK Unified Ideographs Extension B
        letters.extend(chr(i) for i in range(0x20000, 0x2A6E0))
        # CJK Unified Ideographs Extension C
        letters.extend(chr(i) for i in range(0x2A700, 0x2B740))
        # CJK Unified Ideographs Extension D
        letters.extend(chr(i) for i in range(0x2B740, 0x2B820))


    # Generate required ammount of passwords.
    for _ in range(args.count):
        print("".join(random_chr(letters) for _ in range(args.length)))
